
 /*
 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/

function RequestSettings() {}
RequestSettings.prototype.init = function(obj){
  if(typeof(obj.onSuccess) == "function" && typeof(obj.onFailure) == "function")
  {
    console.log("SUCCESSFUL CALLBACKS VERIFY");
    requestedResponseonSuccess = obj.onSuccess;
    requestedResponseonFailure = obj.onFailure;
    makeRequest(obj.clientSecret, getRequestParam('authcode'), obj.method);
  }else{
    alert("Vos callBacks ne sont pas encore définit. Vérifiez que vous avez #onSuccess# et #onFailure# définit sans quote ");
  }
}

var AFH = new RequestSettings();
var httpRequest;
var urlRequest = "http://127.0.0.1:8000/api/traceconnexion/generate/accesstoken";
var requestedResponseonSuccess = function(data){ }
var requestedResponseonFailure = function(data){ }

/* document.getElementById("ajaxButton").onclick = function() {
    var authcode = 'Noel';
    makeRequest(authcode);
};*/

function makeRequest(clientSecret, authcode, method) {

    if(authcode == null)
    {
      var message = 'Echec !!! authcode non définit.';
      console.log(message);
      requestedResponseonFailure({"code": -1, "message": message, 'detail': "Nous n'avons pas pu récupérer le paramètre authcode de votre requête."});
      return false;
    }
    if (window.XMLHttpRequest) { // Mozilla, Safari, IE7+...
        httpRequest = new XMLHttpRequest();
    }
    else if (window.ActiveXObject) { // IE 6 et antérieurs
        httpRequest = new ActiveXObject("Microsoft.XMLHTTP");
    }

    if (!httpRequest) {
        alert('Abandon :( Impossible de créer une instance de XMLHTTP');
        return false;
    }

    httpRequest.onreadystatechange = alertContents;
    httpRequest.open(method, urlRequest);
    httpRequest.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
    var data = JSON.stringify({"clientSecret": clientSecret, "authcode": authcode});
    console.log(data);
    httpRequest.send(data);
}

function alertContents() {
  
  if (httpRequest.readyState === XMLHttpRequest.DONE) {
    if (httpRequest.status === 200) {
        var response = JSON.parse(httpRequest.responseText);
        requestedResponseonSuccess(response);
    } else {
      requestedResponseonFailure({"code": httpRequest.status, "message": httpRequest.statusText, 'detail': httpRequest.responseText});
    }
  }

}

function getRequestParam(name){
    if(name=(new RegExp('[?&]'+encodeURIComponent(name)+'=([^&]*)')).exec(location.search))
        return decodeURIComponent(name[1]);
}
  
