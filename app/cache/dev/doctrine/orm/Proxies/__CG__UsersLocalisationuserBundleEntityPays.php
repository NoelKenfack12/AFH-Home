<?php

namespace Proxies\__CG__\Users\LocalisationuserBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Pays extends \Users\LocalisationuserBundle\Entity\Pays implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'id', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'nom', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'siteweb', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'citoyen', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'citoyenne', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'code', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'domaine', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'drapeau', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'continent', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'langues', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'users', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'src', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'alt', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'file', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'tempFilename', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'servicefile');
        }

        return array('__isInitialized__', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'id', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'nom', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'siteweb', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'citoyen', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'citoyenne', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'code', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'domaine', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'drapeau', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'continent', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'langues', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'users', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'src', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'alt', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'file', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'tempFilename', '' . "\0" . 'Users\\LocalisationuserBundle\\Entity\\Pays' . "\0" . 'servicefile');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Pays $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNom($nom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNom', array($nom));

        return parent::setNom($nom);
    }

    /**
     * {@inheritDoc}
     */
    public function getNom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNom', array());

        return parent::getNom();
    }

    /**
     * {@inheritDoc}
     */
    public function setSiteweb($siteweb)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSiteweb', array($siteweb));

        return parent::setSiteweb($siteweb);
    }

    /**
     * {@inheritDoc}
     */
    public function getSiteweb()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSiteweb', array());

        return parent::getSiteweb();
    }

    /**
     * {@inheritDoc}
     */
    public function setCitoyen($citoyen)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCitoyen', array($citoyen));

        return parent::setCitoyen($citoyen);
    }

    /**
     * {@inheritDoc}
     */
    public function getCitoyen()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCitoyen', array());

        return parent::getCitoyen();
    }

    /**
     * {@inheritDoc}
     */
    public function setCode($code)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCode', array($code));

        return parent::setCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function getCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', array());

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function premajuscule()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'premajuscule', array());

        return parent::premajuscule();
    }

    /**
     * {@inheritDoc}
     */
    public function setContinent(\Users\LocalisationuserBundle\Entity\Continent $continent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContinent', array($continent));

        return parent::setContinent($continent);
    }

    /**
     * {@inheritDoc}
     */
    public function getContinent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContinent', array());

        return parent::getContinent();
    }

    /**
     * {@inheritDoc}
     */
    public function addLangue(\Users\LocalisationuserBundle\Entity\Langue $langues)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLangue', array($langues));

        return parent::addLangue($langues);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLangue(\Users\LocalisationuserBundle\Entity\Langue $langues)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLangue', array($langues));

        return parent::removeLangue($langues);
    }

    /**
     * {@inheritDoc}
     */
    public function getLangues()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLangues', array());

        return parent::getLangues();
    }

    /**
     * {@inheritDoc}
     */
    public function nomValide(\Symfony\Component\Validator\ExecutionContextInterface $context)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'nomValide', array($context));

        return parent::nomValide($context);
    }

    /**
     * {@inheritDoc}
     */
    public function setCitoyenne($citoyenne)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCitoyenne', array($citoyenne));

        return parent::setCitoyenne($citoyenne);
    }

    /**
     * {@inheritDoc}
     */
    public function getCitoyenne()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCitoyenne', array());

        return parent::getCitoyenne();
    }

    /**
     * {@inheritDoc}
     */
    public function name($tail)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'name', array($tail));

        return parent::name($tail);
    }

    /**
     * {@inheritDoc}
     */
    public function setDrapeau(\Users\LocalisationuserBundle\Entity\Drapeau $drapeau = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDrapeau', array($drapeau));

        return parent::setDrapeau($drapeau);
    }

    /**
     * {@inheritDoc}
     */
    public function getDrapeau()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDrapeau', array());

        return parent::getDrapeau();
    }

    /**
     * {@inheritDoc}
     */
    public function addUser(\Users\UserBundle\Entity\User $users)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUser', array($users));

        return parent::addUser($users);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUser(\Users\UserBundle\Entity\User $users)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUser', array($users));

        return parent::removeUser($users);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsers', array());

        return parent::getUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function setDomaine($domaine)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDomaine', array($domaine));

        return parent::setDomaine($domaine);
    }

    /**
     * {@inheritDoc}
     */
    public function getDomaine()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDomaine', array());

        return parent::getDomaine();
    }

    /**
     * {@inheritDoc}
     */
    public function getTempFilename()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTempFilename', array());

        return parent::getTempFilename();
    }

    /**
     * {@inheritDoc}
     */
    public function setTempFilename($temp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTempFilename', array($temp));

        return parent::setTempFilename($temp);
    }

    /**
     * {@inheritDoc}
     */
    public function getFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFile', array());

        return parent::getFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setServicefile(\General\ServiceBundle\Servicetext\GeneralServicetext $service)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setServicefile', array($service));

        return parent::setServicefile($service);
    }

    /**
     * {@inheritDoc}
     */
    public function getServicefile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getServicefile', array());

        return parent::getServicefile();
    }

    /**
     * {@inheritDoc}
     */
    public function getUploadDir()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUploadDir', array());

        return parent::getUploadDir();
    }

    /**
     * {@inheritDoc}
     */
    public function setFile(\Symfony\Component\HttpFoundation\File\UploadedFile $file)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFile', array($file));

        return parent::setFile($file);
    }

    /**
     * {@inheritDoc}
     */
    public function preUpload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preUpload', array());

        return parent::preUpload();
    }

    /**
     * {@inheritDoc}
     */
    public function upload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'upload', array());

        return parent::upload();
    }

    /**
     * {@inheritDoc}
     */
    public function preRemoveUpload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preRemoveUpload', array());

        return parent::preRemoveUpload();
    }

    /**
     * {@inheritDoc}
     */
    public function postRemoveUpload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'postRemoveUpload', array());

        return parent::postRemoveUpload();
    }

    /**
     * {@inheritDoc}
     */
    public function getWebPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWebPath', array());

        return parent::getWebPath();
    }

    /**
     * {@inheritDoc}
     */
    public function setSrc($src)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSrc', array($src));

        return parent::setSrc($src);
    }

    /**
     * {@inheritDoc}
     */
    public function getSrc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSrc', array());

        return parent::getSrc();
    }

    /**
     * {@inheritDoc}
     */
    public function setAlt($alt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAlt', array($alt));

        return parent::setAlt($alt);
    }

    /**
     * {@inheritDoc}
     */
    public function getAlt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAlt', array());

        return parent::getAlt();
    }

}
